
= mcarlo - evaluatie van bedrijfsresultaten met MonteCarlo faciliteiten

== Gebruik

   mcarlo [options] filename
   Options:
      -n, --number=INT    set number of runs to INT
                          must be a multiple of 100
                          default: 10,000
      -s, --seed=INT      random seed - causes a fixed set of random numbers to be used
      -w, --width=INT     printing width for numbers, default: 8
      -l, --list=string   variables to be displayed, comma-separated
                          implies --verbose
      -p, --plot=string   Non-constant variables to be plotted, comma-separated
      -y, --ylog          Y-axis for scatterplots logarithmic
      -h, --help          print this help and exit
      -v, --verbose       show values of all (or all --list-specified) variables for each step
      -V, --version       print version and exit

== Beschrijving

*mcarlo* berekent bedrijfsresultaten op basis van bedrijfsgegevens die op
een overzichtelijke manier in een tweekoloms, tab-gescheiden, tabel kunnen
worden aangeleverd. De eerste kolom van de tabel bevat sleutelwoorden die
(op drie na, zie hierna) door de gebruiker gedefinieerd worden. Deze
sleutelwoorden beginnen met een hoofdletter en bevatten verder alleen
hoofd- en kleine letters.

In de tweede kolom wordt gedefinieerd hoe de waarde van het sleutelwoord in
kolom 1 berekend moet worden.

=== Opties

<tt>--number </tt><i>n</i>::
        Stel het aantal runs in. De default is dat slechts 1 run gedraaid
        wordt. Meer dan één run heeft alleen zin wanneer een of meer
        distributie-variabele gebruikt worden, omdat anders steeds dezelfde
        uitvoer gegenereerd wordt. Met een groter aantal runs onstaat de
        mogelijkheid de uitvoer te filteren en statistiek op de resultaten
        van de verschillende variabelen los te laten.
<tt>--list</tt><i> varname [,varname...]</i>::
        Komma-gescheiden lijst van variabelen die in iedere ronde moeten
        worden afgedrukt; impliceert <tt>--verbose</tt>.
<tt>--plot</tt><i> varname [,varname...]</i>:: Komma-gescheiden lijst van
        niet-constante, singuliere variabelen die na afloop moeten worden
        geplot. Per variabele wordt de verdeling ervan geplot, met
        daarnaast de laatste variabele (meestal NPV) als functie van deze.
<tt>--width </tt><i>n</i>::
        Zet de veldbreedte (default 8) waarbinnen berekende waarden worden
        afgedrukt. Het format waarmee dat gebeurt wordt automatisch
        geoptimaliseerd.
<tt>--ylog </tt>::
	Maar y-as voor scatterplot  logaritmisch.
<tt>--seed </tt><i>integer</i>::
        Initialiseert de randomgenerator met de opgegeven waarde. Vooral
        voor test-doeleinden: zorgt dat altijd dezelfde output wordt
        gegenereerd.
<tt>--verbose</tt>::
        Print de waarden van alle (of de door <tt>--list</tt> gespecificeerde)
        variabelen voor iedere stap. De volgende stap wordt gezet na
        het typen van _enter_; de simulatie kan worden afgebroken met
        _q_ _enter_.

=== Enkelvoudige variabelen
---
Als die waarde enkelvoudig is (in tegenstelling tot een array) kan kolom 2
een getal bevatten, of de naam van een eerder gedefinieerd sleutelwoord, of
een eenvoudige expressie. Enkele voorbeelden:

  N		6

Dit zijn meteen ook de ene variabele die vereist is, en die aan het
begin van de file gedefinieerd moeten worden, in ieder geval voordat met
arrays gewerkt gaat worden. N is het aantal jaren waarover de evaluatie plaatsvindt

Nog enkele voorbeelden met expressies:

  Growth	5%
  Discount	Growth*0.8
  Inflation	Growth > 10% ? 10% : Growth*0.8

We zien hier meteen dat getallen ook in de vorm van percentages kunnen
worden ingegeven (10% is equivalent met 0.1) en dat als eenvoudige
expressie ook een if-then-else expressie van de vorm <tt> expr ? truevalue
: falsevalue</tt> mogelijk is. Inflation krijgt hier dus de waarde 0.04 (4%).

=== Distributiefunctie-variabelen
---
De _dist_ functie genereert een functievariabele, die een _sample_ operator
kent waarvan elk gebruik een nieuwe trekking oplevert uit een door de
functie gedefinieerde verdeling. Er zijn vier verdelingen beschikbaar:

[normal] wordt gedefinieerd met dist('normal',mean,standarddeviation)
[lognormal] wordt gedefinieerd met dist('lognormal',mean,standarddeviation)
[triangular] wordt gedefinieerd met dist('triangular',lowerlimit,upperlimit,mode)
[uniform] wordt gedefinieerd met dist('uniform',lowerlimit,upperlimit)

Voor de normaal- en lognormaal-verdelingen kan de sample-methode twee argumenten meekrijgen: min en max.
Wanneer min onbegrensd moet blijven, geef dan nil op; voorbeelden:

Test	dist('normal',4%, 2%)
S	Test.sample		# waarden tussen -oneindig en oneindig
S	Test.sample(-1,1)	# waarden tussen -1 en 1
S	Test.sample(nil,1)	# waarden tussen -oneindig en 1
S	Test.sample(0)		# waarden tussen 0 en oneindig
S	Test.sample(0,nil)	# waarden tussen 0 en oneindig

Een voorbeeld:

  Growth	dist('normal',4%, 2%)
  Xa		Growth.sample
  Xb		Growth.sample
  Xc		Growth.sample
  Xd		Growth.sample
  Xe		Growth.sample

Evaluatie van Growth.sample levert in Xa, Xb, Xc, Xd en Xe,
bijvoorbeeld, 0.0353, 0.0584, 0.0485, 0.0336 en 0.0396

=== Array variabelen
---
Een definitie in kolom 2 kan ook een array opleveren. Enkele voorbeelden
maken dit snel duidelijk:

  Year		2011	2012	2013	2014	2015	2016

Hier is een array van 6 jaren dus expliciet ingevoerd in 6 tab-gescheiden kolommen.

  Year		2011.count

Dit levert in Year hetzelfde resultaat op, waarbij de bovenaan gedefinieerde N het
aantal kolommen bepaalt.

  LabourCost	13.grow(Inflation)

Dit levert in LabourCost een array van 6 elementen op, het eerste is 13, de volgende
groeien met de Inflation; het resultaat is dus [13, 13.52, 14.06, 14.62,
15.21, 15.82]

  LabourCost	13.grow(Inflation,2)

Het tweede argument (dat een default waarde 1 heeft) geeft aan in welk jaar
de variabele zijn eerste waarde krijgt, hier dus in het tweede jaar (2012).
Het resultaat is dus dat LabourCost de waarden [0, 13, 13.52, 14.06, 14.62, 15.21] krijgt.

Arrays kunnen ook met elkaar of met een enkelvoudige variabele worden
vermenigvuldigd, gedeeld, opgeteld, afgetrokken, waarbij de eventuele
enkelvoudige variabele dat altijd de tweede operand moet zijn:

  Years		Year*3

levert in Years [6033, 6036, 6039, 6042, 6045, 6048] op.

  Years		Year-2000

levert in Years [11, 12, 13, 14, 15, 16] op.

  Yearsquare	Years*Years

vervangt de elementen van Years door hun kwadraten, wat dus [121, 144, 169, 196, 225, 256]
oplevert.

  Rsum		Years.runningsum

genereert de lopende som van de elementen (hier 11..16) van het array. Dat
levert hier dus [11, 23, 36, 50, 65, 81].

  MyArray	2	-5	-6	-7	8	6
  Ppart		MyArray.pospart

Vervangt alle negatieve elementen door 0 en levert dus in Ppart [2, 0, 6, 0, 8, 6] op.

  Npart		MyArray.negpart

Vervangt alle positieve elementen door 0 en levert dus in Npart [0, -5, 0, -7, 0, 0] op.

  MyArray	-100.0	12.0	13.0	14.0	15.0	16.0
  Gval		MyArray.gradval(Growth,Discount)

Levert een array van gelijke lengte, met alleen nullen, behalve in het laatste element, 
dat de Graduation Value van de oorspronkelijke elementen bevat, berekend op basis van een
Sustainable Growth Rate _Growth_ en een Discount Rate _Discount_.
Gval wordt zo [0, 0, 0, 0, 0, -1680]

  TCF		MyArray.tcf

Berekent Taxloss Carried Forward. TCF krijgt hier dus de waarde [0, -100, -88, -75, -61, -46.0]

  CIR		0.005.cir(revspeed,lteq,volatility,eta)

levert een array met interest rates volgens Cox, Ingersoll en Ross,
beginnend met 0.005 en berekend met mean reversion speed, long-term
equilibrium interest rate, volatility of interest rate en eta.

  CIR		0.075.cir(10, 0.6, 0.04, 0.021, -2.831) * 100.0

levert een array [7.500, 3.772, 2.754, 2.515, 2.463, 2.452]

=== Enkelvoudige variabelen uit array variabelen
---
Een expressie in kolom 2 kan ook uit een array weer een enkelvoudig getal opleveren.

  MySum		MyArray.sum

levert in MySum de som van de array-elementen, hier dus -30

  MyMin		MyArray.min

levert in MyMin de laagste waarde van MyArray, -100

  MyMax		MyArray.max

levert in MyMax de maximum waarde van MyArray, 16

  MyArray	9.35	9.91	10.50	11.13	11.80	12.51
  NPV		MyArray.npv(5%)

levert in NPV de Net Present Value op basis van discount rate van, hier,
5%, met 54.70 als resultaat.

  IRR		MyArray.irr

levert in IRR de Internal Rate of Return, hier 1443239783.29

--
$Id$
