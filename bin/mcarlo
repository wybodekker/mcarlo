#!/usr/bin/env ruby

require 'ostruct'
require 'erb'
require 'wdstats'
require 'scriptingutils'
require 'tempfile'

class Array
  # return the type of the array in mcarlo terms:
  # a simple assignment, a formula, an array of values, an empty array
  def formtype
    if join =~ /^[-+.[:digit:]]+$/ # numeric chars only?
      return :simple_assignment if size == 1
      return :array
    else
      return :formula
    end
  end
end

# make entry in @vars and return the name of the variable defined
def enter(k,v,str)
  line = "@vars.#{k} = #{v}"
  line.gsub!(/%/,'/100.0') if line =~ /%/ 
  str << line.gsub(/@vars\./,'')+"\n"
  eval line
  k
end

RELEASE = 2.01
verbose,number,infile,list,seed = false,10000
OptionParser.new do |opt|
  opt.banner =  "#{MYNAME} - evaluatie van bedrijfsresultaten met MonteCarlo faciliteiten\n"
  opt.banner << "Usage: #{MYNAME} [options] filename"
  opt.separator "Options:"

  opt.on('-n','--number=INT',Integer,
      	'set number of runs to INT',
      	'must be a multiple of 100',
      	'default: 10,000') do |v|
    (v > 0) && (v % 100 == 0) or quit("The number of runs must be a multiple of 100")
    number = v
  end

  opt.on('-s','--seed=INT',Integer,'random seed - causes a fixed set of random numbers to be used') do |v| seed = v end

  opt.on('-l','--list=STRING',String,
    'variables to be displayed, comma-separated',
    'implies --verbose') do |v|
    list = v.split(',')
    verbose = true
  end

  opt.on('-h','--help',
    'print this help and exit'
  ) do puts opt.help; exit; end

  opt.on('-v','--verbose',
    'show values of all (or all --list-specified) variables for each step'
  ) do verbose = true end

  opt.on('-V','--version',
    'print version and exit'
  ) do print_version(RELEASE) end
  opt.parse!
end or quit("Error parsing options")

infile = ARGV[0] or quit("I need a filename")
test(?e,infile)  or quit("File #{infile} does not exist")
test(?r,infile)  or quit("File #{infile} is not readable")

which('gnuplot') or quit("Could not find executable gnuplot")
which('feedgnuplot') or quit("Could not find executable feedgnuplot")
@vars = OpenStruct.new
OPS = ['+','-','*','/','?',':','<','>','<=','>=','**']

lineno = 0
routine = "def mccalc\n"
varlist,nonconst = [],[]

preamble = PREAMBLE.result(binding)

open(infile) do |infile|
  infile.readlines.each do |l|
    lineno += 1
    next if l =~ /^#/    # skip comment
    next if l =~ /^\s*$/ # skip lege regels
    var,*form = l.chomp.split(/\s+/).map do |x|
      x.gsub!(/[-+*\/<>?:]+/) do |op| # be sure to space operators
        OPS.index(op) or quit("Line #{lineno}: Operator #{op} is not allowed; maybe you need parentheses?")
        " #{op} "
      end
      x = nil if x.gsub(/\s+/,'').empty?
      x
    end
    var =~ /^[A-Z]\w*$/ or quit("Line #{lineno}: Illegal variable `#{var}'\nvariables must contain [A-Za-z0-9_] only, starting with an uppercase letter")

    case form.formtype
    when :simple_assignment
      varlist.push(enter(var,form[0],preamble))
    when :formula
      form = form.join(' ')
      # in formula's, prefix names that are defined in @vars with `@vars.':
      form.gsub!(/([A-Z][a-zA-Z]*)/) {
        if @vars.respond_to?($1)
          "@vars."+$1
        else
          quit("Line #{lineno}: Undefined variable #{$1}")
        end
      }
      if form =~ /^dist\(/
        varlist.push(enter(var,form,preamble))
      else
        varlist.push(enter(var,form,routine))
        nonconst.push(var) # remember which vars to prefix with _
      end
    else # manual array
      varlist.push(enter(var,form.map { |x| x.to_f }.inspect+'.to_magic',preamble))
    end
  end
end

list ||= varlist
(l = list-varlist).empty? or quit("unknown variable#{l.size>1 ? 's' : ''} #{l.inspect} in --list option")
maxlen = varlist.map {|v| v.size}.max # max length of variable name

if verbose
  list.each do |v|
    routine << "  puts '#{v.ljust(maxlen)}:' + #{v}.inspect\n"
  end
  routine << %q{
    print 'stepping, type q to stop '
    q = gets
    exit if q.strip == 'q'
  }
end
routine << "\nend\n\n"

# make internal vars non-constants with _ prefix
nonconst.each { |v|
  routine = routine.gsub(/\b#{v}\b/m,'_'+v).sub(/(^  puts .)_/m,'\1')
}

postamble = POSTAMBLE.result(binding)

script = preamble + routine + postamble
tf = Tempfile.new('mcarlo')
tf.puts script
tf.close
exec 'ruby '+tf.path

# __TEMPLATES__
BEGIN {
  require 'erb'

  PREAMBLE = ERB.new(<<-'EOD'.tr("\t",""),nil,'%')
	#!/usr/bin/env ruby
	# encoding: utf-8
	require 'wdstats'
	require 'rubystats'
	   number = <%= number %>
	    every = number/100
	     seed = <%= seed.inspect %>
	starttime = Time.now
	srand(seed.to_i) if seed
	EOD

  POSTAMBLE = ERB.new(<<-'EOD'.tr("\t",""),nil,'%')
	npv,mlast = [],[]
	plot = open(%Q{|feedgnuplot \
	  --lines --points \
	  --extracmds 'set logscale y2' \
	  --stream 0 \
	  --xmin 0 --xmax 100 \
	  --title "mcarlo2 n=<%= number %> seed=<%= seed.inspect %>" \
	  --y2 1 \
	  --stream \
	  --legend 0 'NPV mean' \
	  --legend 1 'SD last 10' \
	  --ylabel '<%= varlist.last %> mean' \
	  --y2label 'SD last 10' 2>/dev/null},'w')
	% if verbose
	puts "%11s %14s" % ["<%= varlist.last %>",'St. dev.']
	% end
	1.upto(number) do |i|
	  npv.push(mccalc)
	  s = 0
	  if i % every == 0
	    m = npv.mean
	    mlast.push(m)
	    if mlast.size >=10
	      s = mlast[-10..-1].psd
	      plot.puts "#{m} #{s}"
	      plot.flush
	    end
	% if verbose
	    puts "%#12.4g %#12.4g" % [m,s]
	% end
	  end
	end
	puts npv.info("\nTest run with seed=<%= seed.inspect %>")
	t = Time.now - starttime
	if t > 600 
	  t/=60
	  unit = 'minutes'
	else
	  unit = 'seconds'
	end
	puts "           Run time (%s): %#12.3g" % [unit,t]
	EOD
}
# $Id$
